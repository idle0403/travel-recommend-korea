"""
계층적 지역 추출기 (Hierarchical Location Extractor)

사용자 프롬프트에서 시 > 구 > 동 > POI 계층 구조를 추출하여
지역 특정성을 최대한 보존합니다.
"""

from typing import Dict, Any, List, Tuple, Optional
import re


class HierarchicalLocationExtractor:
    """프롬프트에서 계층적 지역 정보 추출"""
    
    # 한국 주요 도시 행정구역 데이터
    KOREAN_LOCATIONS = {
        '서울': {
            '강서구': ['마곡동', '등촌동', '화곡동', '가양동', '염창동', '방화동', '공항동'],
            '강남구': ['역삼동', '삼성동', '청담동', '대치동', '신사동', '논현동', '압구정동', '개포동', '세곡동', '일원동'],
            '종로구': ['종로1가', '종로2가', '종로3가', '종로4가', '사직동', '삼청동', '평창동', '부암동', '교남동'],
            '중구': ['명동', '남대문로', '소공동', '회현동', '남산동', '필동', '장충동', '광희동', '을지로'],
            '용산구': ['이태원동', '한남동', '후암동', '용산동', '남영동', '청파동', '원효로', '효창동', '서빙고동'],
            '성동구': ['성수동', '왕십리동', '행당동', '금호동', '옥수동', '상왕십리동'],
            '광진구': ['구의동', '광장동', '중곡동', '능동', '자양동', '화양동'],
            '동대문구': ['회기동', '휘경동', '이문동', '전농동', '답십리동', '장안동', '청량리동'],
            '중랑구': ['면목동', '상봉동', '중화동', '묵동', '망우동', '신내동'],
            '성북구': ['성북동', '돈암동', '안암동', '보문동', '정릉동', '길음동', '종암동', '월곡동', '장위동', '석관동'],
            '강북구': ['미아동', '번동', '수유동', '우이동'],
            '도봉구': ['쌍문동', '방학동', '창동', '도봉동'],
            '노원구': ['월계동', '공릉동', '하계동', '상계동', '중계동'],
            '은평구': ['응암동', '역촌동', '불광동', '녹번동', '홍은동', '신사동', '증산동', '수색동', '구산동', '대조동'],
            '서대문구': ['충정로', '천연동', '북아현동', '신촌동', '연희동', '홍제동', '홍은동'],
            '마포구': ['아현동', '공덕동', '도화동', '용강동', '대흥동', '염리동', '신수동', '서강동', '서교동', '합정동', '망원동', '연남동', '성산동', '상암동'],
            '양천구': ['신정동', '목동', '신월동'],
            '구로구': ['구로동', '가리봉동', '고척동', '개봉동', '오류동', '궁동', '온수동', '천왕동', '항동'],
            '금천구': ['가산동', '독산동', '시흥동'],
            '영등포구': ['영등포동', '여의도동', '당산동', '도림동', '문래동', '양평동', '신길동', '대림동'],
            '동작구': ['노량진동', '상도동', '흑석동', '사당동', '대방동', '신대방동'],
            '관악구': ['봉천동', '신림동', '남현동'],
            '서초구': ['서초동', '잠원동', '반포동', '방배동', '양재동', '내곡동'],
            '강동구': ['명일동', '고덕동', '상일동', '길동', '둔촌동', '암사동', '성내동', '천호동', '강일동'],
            '송파구': ['잠실동', '신천동', '풍납동', '송파동', '석촌동', '삼전동', '가락동', '문정동', '장지동', '방이동', '오금동']
        },
        '부산': {
            '해운대구': ['우동', '중동', '송정동', '재송동', '반여동', '석대동', '반송동', '좌동'],
            '수영구': ['광안동', '남천동', '수영동', '망미동', '민락동'],
            '동래구': ['명륜동', '온천동', '사직동', '안락동', '명장동', '복천동'],
            '부산진구': ['부전동', '범천동', '연지동', '초읍동', '양정동', '전포동', '부암동', '당감동'],
            '남구': ['대연동', '용호동', '용당동', '감만동', '우암동'],
            '중구': ['중앙동', '동광동', '남포동', '영주동', '광복동', '부평동'],
            '서구': ['서대신동', '동대신동', '부민동', '아미동', '초장동', '충무동'],
            '동구': ['초량동', '수정동', '좌천동', '범일동', '범천동'],
            '영도구': ['남항동', '영선동', '신선동', '봉래동', '청학동', '동삼동'],
            '북구': ['구포동', '금곡동', '화명동', '덕천동', '만덕동'],
            '사상구': ['삼락동', '모라동', '덕포동', '괘법동', '감전동', '주례동', '학장동'],
            '사하구': ['괴정동', '당리동', '하단동', '신평동', '장림동', '다대동'],
            '금정구': ['금사동', '구서동', '서동', '선동', '청룡동', '회동동', '장전동', '남산동'],
            '강서구': ['대저동', '강동동', '명지동', '녹산동', '죽림동', '지사동'],
            '연제구': ['거제동', '연산동'],
            '기장군': ['기장읍', '장안읍', '정관읍', '일광읍', '철마면']
        },
        '대구': {
            '중구': ['동인동', '삼덕동', '성내동', '대신동', '남산동', '대봉동'],
            '동구': ['신암동', '신천동', '효목동', '도평동', '불로동', '지저동'],
            '서구': ['내당동', '비산동', '평리동', '상리동', '원대동'],
            '남구': ['대명동', '봉덕동', '이천동'],
            '북구': ['산격동', '검단동', '침산동', '구암동', '칠성동', '노원동'],
            '수성구': ['범어동', '만촌동', '수성동', '황금동', '중동', '상동', '파동', '두산동'],
            '달서구': ['성당동', '두류동', '본동', '이곡동', '신당동', '본리동', '죽전동', '장기동', '용산동', '도원동', '월성동', '진천동', '상인동', '월암동', '대곡동', '대천동'],
            '달성군': ['화원읍', '논공읍', '다사읍', '유가읍', '옥포읍', '현풍읍', '가창면', '하빈면', '구지면']
        },
        '인천': {
            '중구': ['중앙동', '신생동', '신흥동', '선화동', '답동', '연안동', '항동', '송월동'],
            '동구': ['만석동', '화수동', '송림동', '화평동', '금곡동'],
            '미추홀구': ['숭의동', '용현동', '학익동', '도화동', '주안동', '관교동'],
            '연수구': ['옥련동', '선학동', '청학동', '동춘동', '송도동'],
            '남동구': ['구월동', '간석동', '만수동', '논현동', '서창동', '운연동', '남촌동', '장수동', '고잔동'],
            '부평구': ['부평동', '산곡동', '청천동', '갈산동', '십정동', '일신동'],
            '계양구': ['계산동', '작전동', '효성동', '서운동', '임학동', '박촌동', '용종동'],
            '서구': ['검단동', '가정동', '신현동', '석남동', '가좌동', '검암동', '경서동', '공촌동', '연희동', '심곡동']
        },
        '광주': {
            '동구': ['금남로', '충장로', '계림동', '산수동', '지산동', '학동', '대인동', '남동'],
            '서구': ['화정동', '치평동', '광천동', '농성동', '양동', '상무동'],
            '남구': ['봉선동', '주월동', '송암동', '진월동', '덕남동', '양림동', '방림동', '사동', '월산동', '대촌동'],
            '북구': ['중흥동', '용봉동', '풍향동', '문흥동', '운암동', '신안동', '두암동', '오치동', '삼각동', '매곡동'],
            '광산구': ['송정동', '도산동', '신가동', '우산동', '평동', '비아동', '월곡동', '첨단동', '하남동', '산월동']
        },
        '대전': {
            '동구': ['중앙동', '신인동', '판암동', '용운동', '효동', '가양동', '자양동', '대동', '삼성동', '홍도동'],
            '중구': ['은행동', '선화동', '대흥동', '문화동', '석교동', '대사동', '부사동', '용두동', '오류동', '태평동'],
            '서구': ['둔산동', '월평동', '탄방동', '갈마동', '용문동', '복수동', '도마동', '변동', '기성동', '가수원동'],
            '유성구': ['진잠동', '학하동', '원신흥동', '온천동', '노은동', '신성동', '전민동', '구즉동', '관평동', '장대동'],
            '대덕구': ['오정동', '대화동', '회덕동', '중리동', '법동', '신탄진동', '석봉동', '비래동']
        },
        '울산': {
            '중구': ['성남동', '복산동', '우정동', '학성동', '반구동', '태화동'],
            '남구': ['삼산동', '신정동', '옥동', '무거동', '달동', '야음동', '장생포동'],
            '동구': ['화정동', '일산동', '전하동', '대송동', '방어동', '남목동'],
            '북구': ['농소동', '연암동', '송정동', '강동', '효문동', '천곡동'],
            '울주군': ['언양읍', '온양읍', '온산읍', '청량읍', '범서읍', '두동면', '두서면', '상북면', '삼남면', '삼동면', '서생면']
        },
        '제주': {
            '제주시': ['일도동', '이도동', '삼도동', '용담동', '건입동', '화북동', '삼양동', '봉개동', '아라동', '오라동', '연동', '노형동', '외도동', '이호동', '도두동'],
            '서귀포시': ['서귀동', '대륜동', '대정읍', '남원읍', '성산읍', '안덕면', '표선면']
        }
    }
    
    # POI (Point of Interest) 키워드 데이터베이스
    POI_KEYWORDS = {
        # 서울 마곡
        '마곡': ['마곡나루역', 'LG사이언스파크', 'LG 사이언스파크', '마곡중앙로', '마곡지구', '마곡 센트럴파크', '마곡역'],
        
        # 서울 강남
        '강남': ['강남역', '테헤란로', '역삼역', '삼성역', '선릉역', '논현역', '신논현역', '언주역', '삼성동', '코엑스', 'COEX'],
        
        # 서울 홍대
        '홍대': ['홍대입구역', '홍대거리', '연남동', '상수역', '합정역', '홍익대학교', '경의선숲길', '홍대클럽거리'],
        
        # 서울 여의도
        '여의도': ['여의도역', '국회의사당역', '여의나루역', '63빌딩', 'IFC몰', '여의도공원', '한강공원', '더현대서울'],
        
        # 서울 명동
        '명동': ['명동역', '명동거리', '명동성당', '남대문시장', '을지로입구역', '충무로역'],
        
        # 서울 강북
        '종로': ['종각역', '종로3가역', '광화문', '경복궁', '북촌한옥마을', '인사동', '삼청동'],
        
        # 서울 신촌/이대
        '신촌': ['신촌역', '이대역', '이화여대', '연세대학교', '신촌로터리'],
        
        # 서울 잠실
        '잠실': ['잠실역', '잠실새내역', '롯데월드', '롯데월드타워', '석촌호수', '올림픽공원'],
        
        # 부산 해운대
        '해운대': ['해운대역', '해운대해수욕장', '해운대비치', '동백섬', '마린시티', '센텀시티', '신세계백화점'],
        
        # 부산 서면
        '서면': ['서면역', '전포카페거리', '롯데백화점', '서면로터리'],
        
        # 부산 광안리
        '광안리': ['광안리해수욕장', '광안대교', '민락동', '수변공원'],
        
        # 대구 동성로
        '동성로': ['중앙로역', '반월당역', '동성로거리', '대구백화점'],
        
        # 인천 송도
        '송도': ['센트럴파크', '송도국제도시', '송도컨벤시아', '트리플스트리트'],
        
        # 제주
        '제주': ['제주공항', '이호테우해변', '용두암', '동문시장', '한라산', '성산일출봉', '우도', '섭지코지']
    }
    
    # 컨텍스트 키워드 패턴
    CONTEXT_PATTERNS = {
        '시간대': {
            '아침': ['아침', '모닝', '조식', '브런치'],
            '점심': ['점심', '런치', '중식', '낮'],
            '저녁': ['저녁', '디너', '석식'],
            '야식': ['야식', '밤', '심야', '새벽']
        },
        '타겟': {
            '직장인': ['직장인', '회사원', '오피스', '워커', 'IT', '업무', '비즈니스'],
            '학생': ['학생', '대학생', '고등학생', '청소년'],
            '가족': ['가족', '아이', '어린이', '유아', '키즈'],
            '데이트': ['데이트', '연인', '커플', '애인'],
            '혼자': ['혼자', '혼밥', '혼술', '1인']
        },
        '목적': {
            '회의': ['회의', '미팅', '세미나', '컨퍼런스'],
            '모임': ['모임', '약속', '술자리', '회식'],
            '산책': ['산책', '걷기', '조깅', '운동'],
            '쇼핑': ['쇼핑', '구경', '구매']
        }
    }
    
    def extract_location_hierarchy(self, prompt: str) -> Dict[str, Any]:
        """
        프롬프트에서 계층적 지역 정보 추출
        
        Args:
            prompt: 사용자 프롬프트 (예: "서울 마곡 LG사이언스파크 근처 IT 직장인 점심 맛집")
        
        Returns:
            {
                'city': '서울',
                'district': '강서구',
                'neighborhood': '마곡동',
                'poi': ['LG사이언스파크', '마곡나루역'],
                'context': {
                    '시간대': ['점심'],
                    '타겟': ['직장인', 'IT'],
                    '목적': []
                },
                'search_radius_km': 1.0,
                'lat': 37.5614,
                'lng': 126.8279,
                'location_specificity': 'high'  # high/medium/low
            }
        """
        result = {
            'city': None,
            'district': None,
            'neighborhood': None,
            'poi': [],
            'context': {
                '시간대': [],
                '타겟': [],
                '목적': []
            },
            'search_radius_km': 3.0,  # 기본값: 도시 레벨
            'lat': None,
            'lng': None,
            'location_specificity': 'low'
        }
        
        # 1. 도시 추출
        for city in self.KOREAN_LOCATIONS.keys():
            if city in prompt:
                result['city'] = city
                break
        
        if not result['city']:
            # 도시가 명시되지 않은 경우 기본값 서울
            result['city'] = '서울'
        
        # 2. 동(neighborhood) 추출 (우선 처리)
        if result['city']:
            for district, neighborhoods in self.KOREAN_LOCATIONS[result['city']].items():
                for neighborhood in neighborhoods:
                    if neighborhood in prompt:
                        result['neighborhood'] = neighborhood
                        result['district'] = district
                        result['search_radius_km'] = 1.0  # 동 레벨: 좁은 반경
                        result['location_specificity'] = 'high'
                        print(f"✅ 동 레벨 감지: {result['city']} {result['district']} {result['neighborhood']}")
                        break
                if result['neighborhood']:
                    break
        
        # 3. 구(district) 추출 (동이 없을 때만)
        if result['city'] and not result['district']:
            for district in self.KOREAN_LOCATIONS[result['city']].keys():
                if district in prompt:
                    result['district'] = district
                    result['search_radius_km'] = 2.0  # 구 레벨: 중간 반경
                    result['location_specificity'] = 'medium'
                    print(f"✅ 구 레벨 감지: {result['city']} {result['district']}")
                    break
        
        # 4. POI 추출 (가장 구체적)
        for poi_area, poi_list in self.POI_KEYWORDS.items():
            for poi in poi_list:
                if poi.lower() in prompt.lower():
                    result['poi'].append(poi)
                    result['search_radius_km'] = 0.5  # POI 레벨: 매우 좁은 반경
                    result['location_specificity'] = 'very_high'
                    print(f"✅ POI 감지: {poi}")
        
        # 중복 제거
        result['poi'] = list(set(result['poi']))
        
        # 5. 컨텍스트 추출
        for context_type, patterns_dict in self.CONTEXT_PATTERNS.items():
            for context_name, patterns in patterns_dict.items():
                for pattern in patterns:
                    if pattern.lower() in prompt.lower():
                        result['context'][context_type].append(context_name)
        
        # 중복 제거
        for context_type in result['context']:
            result['context'][context_type] = list(set(result['context'][context_type]))
        
        # 6. 좌표 변환
        result['lat'], result['lng'] = self._get_coordinates(
            result['city'], 
            result['district'], 
            result['neighborhood'],
            result['poi']
        )
        
        # 7. 검색 쿼리 생성용 텍스트
        result['location_text'] = self._build_location_text(result)
        
        print(f"\n📍 지역 계층 추출 결과:")
        print(f"   도시: {result['city']}")
        print(f"   구: {result['district']}")
        print(f"   동: {result['neighborhood']}")
        print(f"   POI: {result['poi']}")
        print(f"   컨텍스트: {result['context']}")
        print(f"   검색 반경: {result['search_radius_km']}km")
        print(f"   위치 정밀도: {result['location_specificity']}")
        print(f"   좌표: ({result['lat']}, {result['lng']})")
        
        return result
    
    def _get_coordinates(
        self, 
        city: Optional[str], 
        district: Optional[str], 
        neighborhood: Optional[str],
        pois: List[str]
    ) -> Tuple[float, float]:
        """
        지역 정보를 위경도 좌표로 변환
        
        우선순위: POI > 동 > 구 > 도시
        """
        # POI 좌표 데이터베이스 (주요 랜드마크)
        POI_COORDINATES = {
            'LG사이언스파크': (37.5614, 126.8279),
            'LG 사이언스파크': (37.5614, 126.8279),
            '마곡나루역': (37.5605, 126.8251),
            '마곡역': (37.5602, 126.8255),
            '강남역': (37.4981, 127.0276),
            '테헤란로': (37.5009, 127.0359),
            'COEX': (37.5130, 127.0592),
            '코엑스': (37.5130, 127.0592),
            '홍대입구역': (37.5571, 126.9245),
            '여의도역': (37.5219, 126.9245),
            'IFC몰': (37.5251, 126.9261),
            '명동역': (37.5610, 126.9865),
            '해운대해수욕장': (35.1631, 129.1635),
            '센텀시티': (35.1694, 129.1308)
        }
        
        # 1. POI가 있으면 POI 좌표 우선
        if pois:
            for poi in pois:
                if poi in POI_COORDINATES:
                    print(f"   좌표 출처: POI ({poi})")
                    return POI_COORDINATES[poi]
        
        # 2. 동 좌표 (하드코딩된 주요 동만 포함)
        NEIGHBORHOOD_COORDINATES = {
            ('서울', '강서구', '마곡동'): (37.5614, 126.8279),
            ('서울', '강남구', '역삼동'): (37.5009, 127.0359),
            ('서울', '강남구', '삼성동'): (37.5140, 127.0630),
            ('서울', '강남구', '청담동'): (37.5196, 127.0476),
            ('서울', '마포구', '서교동'): (37.5571, 126.9245),  # 홍대
            ('서울', '마포구', '연남동'): (37.5667, 126.9245),
            ('서울', '영등포구', '여의도동'): (37.5219, 126.9245),
            ('서울', '중구', '명동'): (37.5610, 126.9865),
            ('서울', '종로구', '종로1가'): (37.5701, 126.9828),
            ('서울', '송파구', '잠실동'): (37.5130, 127.1021),
            ('부산', '해운대구', '우동'): (35.1631, 129.1635),
            ('부산', '부산진구', '부전동'): (35.1561, 129.0601),
            ('부산', '수영구', '광안동'): (35.1537, 129.1188),
            ('대구', '중구', '동인동'): (35.8714, 128.6014)
        }
        
        if neighborhood:
            key = (city, district, neighborhood)
            if key in NEIGHBORHOOD_COORDINATES:
                print(f"   좌표 출처: 동 ({neighborhood})")
                return NEIGHBORHOOD_COORDINATES[key]
        
        # 3. 구 좌표
        DISTRICT_COORDINATES = {
            ('서울', '강서구'): (37.5509, 126.8495),
            ('서울', '강남구'): (37.5172, 127.0473),
            ('서울', '종로구'): (37.5735, 126.9788),
            ('서울', '중구'): (37.5641, 126.9979),
            ('서울', '마포구'): (37.5663, 126.9019),
            ('서울', '영등포구'): (37.5264, 126.8963),
            ('서울', '송파구'): (37.5145, 127.1059),
            ('부산', '해운대구'): (35.1631, 129.1635),
            ('부산', '부산진구'): (35.1628, 129.0537),
            ('부산', '중구'): (35.1013, 129.0320),
            ('대구', '중구'): (35.8714, 128.6014),
            ('대구', '수성구'): (35.8581, 128.6308)
        }
        
        if district:
            key = (city, district)
            if key in DISTRICT_COORDINATES:
                print(f"   좌표 출처: 구 ({district})")
                return DISTRICT_COORDINATES[key]
        
        # 4. 도시 좌표 (기본값)
        CITY_COORDINATES = {
            '서울': (37.5665, 126.9780),
            '부산': (35.1796, 129.0756),
            '대구': (35.8714, 128.6014),
            '인천': (37.4563, 126.7052),
            '광주': (35.1595, 126.8526),
            '대전': (36.3504, 127.3845),
            '울산': (35.5384, 129.3114),
            '제주': (33.4996, 126.5312)
        }
        
        if city and city in CITY_COORDINATES:
            print(f"   좌표 출처: 도시 ({city})")
            return CITY_COORDINATES[city]
        
        # 기본값: 서울
        print(f"   좌표 출처: 기본값 (서울)")
        return (37.5665, 126.9780)
    
    def _build_location_text(self, location_hierarchy: Dict) -> str:
        """검색 쿼리용 위치 텍스트 생성"""
        parts = []
        
        if location_hierarchy['city']:
            parts.append(location_hierarchy['city'])
        
        if location_hierarchy['district']:
            parts.append(location_hierarchy['district'])
        
        if location_hierarchy['neighborhood']:
            parts.append(location_hierarchy['neighborhood'])
        
        if location_hierarchy['poi']:
            parts.extend(location_hierarchy['poi'][:2])  # 최대 2개 POI
        
        return ' '.join(parts)

